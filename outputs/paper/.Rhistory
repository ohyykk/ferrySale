#| include: false
#| warning: false
#| message: false
#install.packages("here")
library(tidyverse)
library(opendatatoronto)
library(here)
#| echo: false
#| warning: false
#| message: false
#| results: "hide"
#### Loading the Cleaned Dataset ####
marriage_licence_packages <- search_packages("Toronto Island Ferry Ticket Counts")
marriage_licence_resources <- marriage_licence_packages %>%
list_package_resources()
# Retrieve the dataset
marriage_licence_statistics <- marriage_licence_resources[2,] %>%
get_resource()
data <- read_csv(file = here("outputs/data/cleaned_data.csv"),
show_col_types = FALSE)
#| echo: false
#| warning: false
#| message: false
#| results: "hide"
#### Loading the Cleaned Dataset ####
marriage_licence_packages <- search_packages("Toronto Island Ferry Ticket Counts")
marriage_licence_resources <- marriage_licence_packages %>%
list_package_resources()
# Retrieve the dataset
marriage_licence_statistics <- marriage_licence_resources[2,] %>%
get_resource()
# Read the cleaned data
data <- read_csv(file = here("outputs/data/cleaned_data.csv"),
show_col_types = FALSE)
# If necessary, suppress the dbplyr messages (this is optional)
# suppressPackageStartupMessages(library(dbplyr))
#| label: fig-linePlot
#| fig-cap: Redemption and Sales Counts Over Time
#| echo: false
# Calculate the range for both y-axes to have a symmetrical appearance
y_max <- max(max(data$Sales.Count), max(data$Redemption.Count))
# Create the plot
ggplot(data, aes(x = Timestamp)) +
# Line plot for Redemption Count
geom_line(aes(y = Redemption.Count), color = "blue", linewidth = 1) +
# Line plot for Sales Count inverted
geom_line(aes(y = -Sales.Count), color = "green", linewidth = 1) +
# Set y-axis limits symmetrically
scale_y_continuous(limits = c(-y_max, y_max),
breaks = seq(-y_max, y_max, by = 1000),
sec.axis = sec_axis(~ -.,
name = "Sales Count",
breaks = seq(y_max, -y_max, by = -1000))) +
labs(title = "Redemption and Sales Count Over Time",
y = "Redemption Count",
x = "Timestamp") +
theme_minimal() +
theme(axis.title.y.right = element_text(color = "green"),
axis.title.y.left = element_text(color = "blue"))
#| label: tbl-cleaned_data
#| fig-cap: Sample Cleaned Data
#| echo: false
# Load necessary libraries
library(knitr)
library(readr)
# Load the cleaned data from the CSV file (adjust the path as needed)
data <- read_csv(file = here("outputs/data/cleaned_data.csv", show_col_types = FALSE)
# Select a segment of the data, e.g., rows 51 to 60 for illustration
segment_data <- data[51:60, ]
#| label: tbl-cleaned_data
#| fig-cap: Sample Cleaned Data
#| echo: false
# Load necessary libraries
library(knitr)
library(readr)
# Load the cleaned data from the CSV file (adjust the path as needed)
data <- read_csv(file = here("outputs/data/cleaned_data.csv"), show_col_types = FALSE)
# Select a segment of the data, e.g., rows 51 to 60 for illustration
segment_data <- data[51:60, ]
# Modify the data for display - create new columns for ID, Time, and Date
segment_data <- segment_data %>%
mutate(ID = row_number() + 50,                          # Create a new ID column starting from 51
Time = format(as.POSIXct(Timestamp), "%H:%M:%S"), # Extract Time from Timestamp
Date = format(as.POSIXct(Timestamp), "%Y-%m-%d")) # Extract Date from Timestamp
# Select only the required columns for display in the table
table_data <- segment_data[, c("ID", "Time", "Redemption.Count", "Sales.Count", "Date")]
# Create the table using kable
kable(table_data, col.names = c('ID', 'Time', 'Tickets Redeemed', 'Tickets Sold', 'Date'),
align = "c",
caption = "Sample of cleaned Ferry Ticket Counts Data")
#| label: tbl-cleaned_data
#| fig-cap: Sample Cleaned Data
#| echo: false
# Load necessary libraries
library(knitr)
library(readr)
# Load the cleaned data from the CSV file (adjust the path as needed)
data <- read_csv(file = here("outputs/data/cleaned_data.csv"), show_col_types = FALSE)
# Select a segment of the data, e.g., rows 51 to 60 for illustration
segment_data <- data[51:60, ]
# Modify the data for display - create new columns for ID, Time, and Date
segment_data <- segment_data %>%
mutate(ID = row_number() + 50,                          # Create a new ID column starting from 51
Time = format(as.POSIXct(Timestamp), "%H:%M:%S"), # Extract Time from Timestamp
Date = format(as.POSIXct(Timestamp), "%Y-%m-%d")) # Extract Date from Timestamp
# Select only the required columns for display in the table
table_data <- segment_data[, c("ID", "Time", "Redemption.Count", "Sales.Count", "Date")]
# Create the table using kable
kable(table_data, col.names = c('ID', 'Time', 'Tickets Redeemed', 'Tickets Sold', 'Date'),
align = "c",
caption = "Sample of cleaned Ferry Ticket Counts Data")
