y="Redemption Count") +
xlim(0, max(data$Sales.Count) * 1.1) +  # Adding some space to the x-axis
ylim(0, max(data$Redemption.Count) * 1.1) +  # Adding some space to the y-axis
theme_minimal()
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
#| label: fig-scatterPlot
#| fig-cap: Scatter Plot of Redemption vs Sales Count
#| echo: false
#| warning: false
#| message: false
ggplot(data, aes(x = Sales.Count, y = Redemption.Count)) +
geom_point(alpha = 0.7) +
labs(
title = "Scatterplot: Redemption Count vs Sales Count",
x = "Sales Count",
y = "Redemption Count"
) +
xlim(0, max(data$Sales.Count) * 1.1) +  # Adding some space to the x-axis
ylim(0, max(data$Redemption.Count) * 1.1) +  # Adding some space to the y-axis
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5)  # Center the title
)
#| label: fig-linePlot
#| fig-cap: Redemption and Sales Counts Over Time
#| echo: false
# Calculate the range for both y-axes to have a symmetrical appearance
y_max <- max(max(data$Sales.Count), max(data$Redemption.Count))
# Create the plot
ggplot(data, aes(x = Timestamp)) +
# Line plot for Redemption Count
geom_line(aes(y = Redemption.Count), color = "#F7C4C1", linewidth = 1.2) +
# Line plot for Sales Count (inverted)
geom_line(aes(y = -Sales.Count), color = "#C3E2EC", linewidth = 1.2) +
# Set y-axis limits symmetrically and apply the secondary axis
scale_y_continuous(limits = c(-y_max, y_max),
breaks = seq(-y_max, y_max, by = 1000),
sec.axis = sec_axis(~ -.,
name = "Sales Count",
breaks = seq(y_max, -y_max, by = -1000))) +
# Add plot labels
labs(
title = "Redemption and Sales Count Over Time",
y = "Redemption Count",  # Y-axis for Redemption Count
x = "Timestamp"          # X-axis for Timestamp
) +
# Apply minimal theme and customize axis titles
theme_minimal() +
theme(
# Color the right-side axis title (Sales Count) to match the orange line
axis.title.y.right = element_text(color = "pink", size = 12),
# Color the left-side axis title (Redemption Count) to match the pink line
axis.title.y.left = element_text(color = "lightblue", size = 12),
# Center the title and increase font size
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
)
#| label: fig-linePlot
#| fig-cap: Redemption and Sales Counts Over Time
#| echo: false
# Calculate the range for both y-axes to have a symmetrical appearance
y_max <- max(max(data$Sales.Count), max(data$Redemption.Count))
# Create the plot
ggplot(data, aes(x = Timestamp)) +
# Line plot for Redemption Count
geom_line(aes(y = Redemption.Count), color = "#F7C4C1", linewidth = 1.2) +
# Line plot for Sales Count (inverted)
geom_line(aes(y = -Sales.Count), color = "#C3E2EC", linewidth = 1.2) +
# Set y-axis limits symmetrically and apply the secondary axis
scale_y_continuous(limits = c(-y_max, y_max),
breaks = seq(-y_max, y_max, by = 1000),
sec.axis = sec_axis(~ -.,
name = "Sales Count",
breaks = seq(y_max, -y_max, by = -1000))) +
# Add plot labels
labs(
title = "Redemption and Sales Count Over Time",
y = "Redemption Count",  # Y-axis for Redemption Count
x = "Timestamp"          # X-axis for Timestamp
) +
# Apply minimal theme and customize axis titles
theme_minimal() +
theme(
# Color the right-side axis title (Sales Count) to match the orange line
axis.title.y.right = element_text(color = "#F7C4C1", size = 12),
# Color the left-side axis title (Redemption Count) to match the pink line
axis.title.y.left = element_text(color = "#C3E2EC", size = 12),
# Center the title and increase font size
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
)
#| label: fig-scatterPlot
#| fig-cap: Scatter Plot of Redemption vs Sales Count
#| echo: false
#| warning: false
#| message: false
ggplot(data, aes(x = Sales.Count, y = Redemption.Count)) +
geom_point(alpha = 0.7, color = "#BCD1BC") +
labs(
title = "Scatterplot: Redemption Count vs Sales Count",
x = "Sales Count",
y = "Redemption Count"
) +
xlim(0, max(data$Sales.Count) * 1.1) +  # Adding some space to the x-axis
ylim(0, max(data$Redemption.Count) * 1.1) +  # Adding some space to the y-axis
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5)  # Center the title
)
#| label: fig-scatterPlot
#| fig-cap: Scatter Plot of Redemption vs Sales Count
#| echo: false
#| warning: false
#| message: false
ggplot(data, aes(x = Sales.Count, y = Redemption.Count)) +
geom_point(alpha = 0.7, color = "#97D1A0") +
labs(
title = "Scatterplot: Redemption Count vs Sales Count",
x = "Sales Count",
y = "Redemption Count"
) +
xlim(0, max(data$Sales.Count) * 1.1) +  # Adding some space to the x-axis
ylim(0, max(data$Redemption.Count) * 1.1) +  # Adding some space to the y-axis
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5)  # Center the title
)
#| label: fig-boxPlot
#| fig-cap: Box Plot of Sales and Redemption Counts
#| echo: false
#| warning: false
#| message: false
ggplot(data, aes(x = "Sales Count", y = Sales.Count, fill = "Sales Count")) +
geom_boxplot(alpha = 0.5) +
geom_boxplot(aes(x = "Redemption Count", y = Redemption.Count, fill = "Redemption Count"), alpha = 0.5) +
scale_fill_manual(values = c("Sales Count" = "#E3C6E0", "Redemption Count" = "#CAC0E1")) +
labs(title = "Box Plot of Sales and Redemption Counts",
x = "Category",
y = "Count",
fill = "Legend") +
theme_minimal() +
theme(legend.position = "top")
#| label: fig-scatterPlot
#| fig-cap: Scatter Plot of Redemption vs Sales Count
#| echo: false
#| warning: false
#| message: false
ggplot(data, aes(x = Sales.Count, y = Redemption.Count)) +
geom_point(alpha = 0.7, color = "#527865") +
labs(
title = "Scatterplot: Redemption Count vs Sales Count",
x = "Sales Count",
y = "Redemption Count"
) +
xlim(0, max(data$Sales.Count) * 1.1) +  # Adding some space to the x-axis
ylim(0, max(data$Redemption.Count) * 1.1) +  # Adding some space to the y-axis
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5)  # Center the title
)
#| label: fig-boxPlot
#| fig-cap: Box Plot of Sales and Redemption Counts
#| echo: false
#| warning: false
#| message: false
ggplot(data, aes(x = "Sales Count", y = Sales.Count, fill = "Sales Count")) +
geom_boxplot(alpha = 0.5) +
geom_boxplot(aes(x = "Redemption Count", y = Redemption.Count, fill = "Redemption Count"), alpha = 0.5) +
scale_fill_manual(values = c("Sales Count" = "#E3C6E0", "Redemption Count" = "#CAC0E1")) +
labs(title = "Box Plot of Sales and Redemption Counts",
x = "Category",
y = "Count",
fill = "Legend") +
theme_minimal() +
theme(legend.position = "top")
#| label: fig-boxPlot
#| fig-cap: Box Plot of Sales and Redemption Counts
#| echo: false
#| warning: false
#| message: false
ggplot(data, aes(x = "Sales Count", y = Sales.Count, fill = "Sales Count")) +
geom_boxplot(alpha = 0.5) +
geom_boxplot(aes(x = "Redemption Count", y = Redemption.Count, fill = "Redemption Count"), alpha = 0.5) +
scale_fill_manual(values = c("Sales Count" = "#E3C6E0", "Redemption Count" = "#CAC0E1")) +
labs(title = "Box Plot of Sales and Redemption Counts",
x = "Category",
y = "Count",
fill = "Legend") +
theme_minimal() +
theme(
legend.position = "top",
plot.title = element_text(hjust = 0.5)  # Center the title
)
#| label: fig-boxPlot
#| fig-cap: Box Plot of Sales and Redemption Counts
#| echo: false
#| warning: false
#| message: false
ggplot(data, aes(x = "Sales Count", y = Sales.Count, fill = "Sales Count")) +
geom_boxplot(alpha = 0.5) +
geom_boxplot(aes(x = "Redemption Count", y = Redemption.Count, fill = "Redemption Count"), alpha = 0.5) +
scale_fill_manual(values = c("Sales Count" = "#E3C6E0", "Redemption Count" = "#93445e")) +
labs(title = "Box Plot of Sales and Redemption Counts",
x = "Category",
y = "Count",
fill = "Legend") +
theme_minimal() +
theme(
legend.position = "top",
plot.title = element_text(hjust = 0.5)  # Center the title
)
#| label: fig-boxPlot
#| fig-cap: Box Plot of Sales and Redemption Counts
#| echo: false
#| warning: false
#| message: false
ggplot(data, aes(x = "Sales Count", y = Sales.Count, fill = "Sales Count")) +
geom_boxplot(alpha = 0.5) +
geom_boxplot(aes(x = "Redemption Count", y = Redemption.Count, fill = "Redemption Count"), alpha = 0.5) +
scale_fill_manual(values = c("Sales Count" = "#306692", "Redemption Count" = "#93445e")) +
labs(title = "Box Plot of Sales and Redemption Counts",
x = "Category",
y = "Count",
fill = "Legend") +
theme_minimal() +
theme(
legend.position = "top",
plot.title = element_text(hjust = 0.5)  # Center the title
)
#| label: fig-boxPlot
#| fig-cap: Box Plot of Sales and Redemption Counts
#| echo: false
#| warning: false
#| message: false
ggplot(data, aes(x = "Sales Count", y = Sales.Count, fill = "Sales Count")) +
geom_boxplot(alpha = 0.5) +
geom_boxplot(aes(x = "Redemption Count", y = Redemption.Count, fill = "Redemption Count"), alpha = 0.5) +
scale_fill_manual(values = c("Sales Count" = "lightgreen", "Redemption Count" = "lightblue")) +
labs(title = "Box Plot of Sales and Redemption Counts",
x = "Category",
y = "Count",
fill = "Legend") +
theme_minimal() +
theme(
legend.position = "top",
plot.title = element_text(hjust = 0.5)  # Center the title
)
#| label: fig-scatterPlot
#| fig-cap: Scatter Plot of Redemption vs Sales Count
#| echo: false
#| warning: false
#| message: false
ggplot(data, aes(x = Sales.Count, y = Redemption.Count)) +
geom_point(alpha = 0.7, color = "#7e88af") +
labs(
title = "Scatterplot: Redemption Count vs Sales Count",
x = "Sales Count",
y = "Redemption Count"
) +
xlim(0, max(data$Sales.Count) * 1.1) +  # Adding some space to the x-axis
ylim(0, max(data$Redemption.Count) * 1.1) +  # Adding some space to the y-axis
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5)  # Center the title
)
#| label: fig-scatterPlot
#| fig-cap: Scatter Plot of Redemption vs Sales Count
#| echo: false
#| warning: false
#| message: false
ggplot(data, aes(x = Sales.Count, y = Redemption.Count)) +
geom_point(alpha = 0.7, color = "#93445e") +
labs(
title = "Scatterplot: Redemption Count vs Sales Count",
x = "Sales Count",
y = "Redemption Count"
) +
xlim(0, max(data$Sales.Count) * 1.1) +  # Adding some space to the x-axis
ylim(0, max(data$Redemption.Count) * 1.1) +  # Adding some space to the y-axis
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5)  # Center the title
)
#| label: fig-linePlot
#| fig-cap: Redemption and Sales Counts Over Time
#| echo: false
# Calculate the range for both y-axes to have a symmetrical appearance
y_max <- max(max(data$Sales.Count), max(data$Redemption.Count))
# Create the plot
ggplot(data, aes(x = Timestamp)) +
# Line plot for Redemption Count
geom_line(aes(y = Redemption.Count), color = "#F7C4C1", linewidth = 1.2) +
# Line plot for Sales Count (inverted)
geom_line(aes(y = -Sales.Count), color = "#C3E2EC", linewidth = 1.2) +
# Set y-axis limits symmetrically and apply the secondary axis
scale_y_continuous(limits = c(-y_max, y_max),
breaks = seq(-y_max, y_max, by = 1000),
sec.axis = sec_axis(~ -.,
name = "Sales Count",
breaks = seq(y_max, -y_max, by = -1000))) +
# Add plot labels
labs(
title = "Redemption and Sales Count Over Time",
y = "Redemption Count",  # Y-axis for Redemption Count
x = "Timestamp"          # X-axis for Timestamp
) +
# Apply minimal theme and customize axis titles
theme_minimal() +
theme(
# Color the right-side axis title (Sales Count) to match the orange line
axis.title.y.right = element_text(color = "#F7C4C1", size = 12),
# Color the left-side axis title (Redemption Count) to match the pink line
axis.title.y.left = element_text(color = "#a5796b", size = 12),
# Center the title and increase font size
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
)
#| label: fig-linePlot
#| fig-cap: Redemption and Sales Counts Over Time
#| echo: false
# Calculate the range for both y-axes to have a symmetrical appearance
y_max <- max(max(data$Sales.Count), max(data$Redemption.Count))
# Create the plot
ggplot(data, aes(x = Timestamp)) +
# Line plot for Redemption Count
geom_line(aes(y = Redemption.Count), color = "#F7C4C1", linewidth = 1.2) +
# Line plot for Sales Count (inverted)
geom_line(aes(y = -Sales.Count), color = "#a5796b", linewidth = 1.2) +
# Set y-axis limits symmetrically and apply the secondary axis
scale_y_continuous(limits = c(-y_max, y_max),
breaks = seq(-y_max, y_max, by = 1000),
sec.axis = sec_axis(~ -.,
name = "Sales Count",
breaks = seq(y_max, -y_max, by = -1000))) +
# Add plot labels
labs(
title = "Redemption and Sales Count Over Time",
y = "Redemption Count",  # Y-axis for Redemption Count
x = "Timestamp"          # X-axis for Timestamp
) +
# Apply minimal theme and customize axis titles
theme_minimal() +
theme(
# Color the right-side axis title (Sales Count) to match the orange line
axis.title.y.right = element_text(color = "#F7C4C1", size = 12),
# Color the left-side axis title (Redemption Count) to match the pink line
axis.title.y.left = element_text(color = "#a5796b", size = 12),
# Center the title and increase font size
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
)
#| label: fig-linePlot
#| fig-cap: Redemption and Sales Counts Over Time
#| echo: false
# Calculate the range for both y-axes to have a symmetrical appearance
y_max <- max(max(data$Sales.Count), max(data$Redemption.Count))
# Create the plot
ggplot(data, aes(x = Timestamp)) +
# Line plot for Redemption Count
geom_line(aes(y = Redemption.Count), color = "#e1929d", linewidth = 1.2) +
# Line plot for Sales Count (inverted)
geom_line(aes(y = -Sales.Count), color = "#a5796b", linewidth = 1.2) +
# Set y-axis limits symmetrically and apply the secondary axis
scale_y_continuous(limits = c(-y_max, y_max),
breaks = seq(-y_max, y_max, by = 1000),
sec.axis = sec_axis(~ -.,
name = "Sales Count",
breaks = seq(y_max, -y_max, by = -1000))) +
# Add plot labels
labs(
title = "Redemption and Sales Count Over Time",
y = "Redemption Count",  # Y-axis for Redemption Count
x = "Timestamp"          # X-axis for Timestamp
) +
# Apply minimal theme and customize axis titles
theme_minimal() +
theme(
# Color the right-side axis title (Sales Count) to match the orange line
axis.title.y.right = element_text(color = "#F7C4C1", size = 12),
# Color the left-side axis title (Redemption Count) to match the pink line
axis.title.y.left = element_text(color = "#a5796b", size = 12),
# Center the title and increase font size
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
)
#| label: fig-linePlot
#| fig-cap: Redemption and Sales Counts Over Time
#| echo: false
# Calculate the range for both y-axes to have a symmetrical appearance
y_max <- max(max(data$Sales.Count), max(data$Redemption.Count))
# Create the plot
ggplot(data, aes(x = Timestamp)) +
# Line plot for Redemption Count
geom_line(aes(y = Redemption.Count), color = "#F7C4C1", linewidth = 1.2) +
# Line plot for Sales Count (inverted)
geom_line(aes(y = -Sales.Count), color = "#a5796b", linewidth = 1.2) +
# Set y-axis limits symmetrically and apply the secondary axis
scale_y_continuous(limits = c(-y_max, y_max),
breaks = seq(-y_max, y_max, by = 1000),
sec.axis = sec_axis(~ -.,
name = "Sales Count",
breaks = seq(y_max, -y_max, by = -1000))) +
# Add plot labels
labs(
title = "Redemption and Sales Count Over Time",
y = "Redemption Count",  # Y-axis for Redemption Count
x = "Timestamp"          # X-axis for Timestamp
) +
# Apply minimal theme and customize axis titles
theme_minimal() +
theme(
# Color the right-side axis title (Sales Count) to match the orange line
axis.title.y.right = element_text(color = "#F7C4C1", size = 12),
# Color the left-side axis title (Redemption Count) to match the pink line
axis.title.y.left = element_text(color = "#a5796b", size = 12),
# Center the title and increase font size
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
)
#| label: fig-linePlot
#| fig-cap: Redemption and Sales Counts Over Time
#| echo: false
# Calculate the range for both y-axes to have a symmetrical appearance
y_max <- max(max(data$Sales.Count), max(data$Redemption.Count))
# Create the plot
ggplot(data, aes(x = Timestamp)) +
# Line plot for Redemption Count
geom_line(aes(y = Redemption.Count), color = "#F7C4C1", linewidth = 1.2) +
# Line plot for Sales Count (inverted)
geom_line(aes(y = -Sales.Count), color = "#97a675", linewidth = 1.2) +
# Set y-axis limits symmetrically and apply the secondary axis
scale_y_continuous(limits = c(-y_max, y_max),
breaks = seq(-y_max, y_max, by = 1000),
sec.axis = sec_axis(~ -.,
name = "Sales Count",
breaks = seq(y_max, -y_max, by = -1000))) +
# Add plot labels
labs(
title = "Redemption and Sales Count Over Time",
y = "Redemption Count",  # Y-axis for Redemption Count
x = "Timestamp"          # X-axis for Timestamp
) +
# Apply minimal theme and customize axis titles
theme_minimal() +
theme(
# Color the right-side axis title (Sales Count) to match the orange line
axis.title.y.right = element_text(color = "#F7C4C1", size = 12),
# Color the left-side axis title (Redemption Count) to match the pink line
axis.title.y.left = element_text(color = "#97a675", size = 12),
# Center the title and increase font size
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
)
#| label: fig-linePlot
#| fig-cap: Redemption and Sales Counts Over Time
#| echo: false
# Calculate the range for both y-axes to have a symmetrical appearance
y_max <- max(max(data$Sales.Count), max(data$Redemption.Count))
# Create the plot
ggplot(data, aes(x = Timestamp)) +
# Line plot for Redemption Count
geom_line(aes(y = Redemption.Count), color = "#F7C4C1", linewidth = 1.2) +
# Line plot for Sales Count (inverted)
geom_line(aes(y = -Sales.Count), color = "#81B0B2", linewidth = 1.2) +
# Set y-axis limits symmetrically and apply the secondary axis
scale_y_continuous(limits = c(-y_max, y_max),
breaks = seq(-y_max, y_max, by = 1000),
sec.axis = sec_axis(~ -.,
name = "Sales Count",
breaks = seq(y_max, -y_max, by = -1000))) +
# Add plot labels
labs(
title = "Redemption and Sales Count Over Time",
y = "Redemption Count",  # Y-axis for Redemption Count
x = "Timestamp"          # X-axis for Timestamp
) +
# Apply minimal theme and customize axis titles
theme_minimal() +
theme(
# Color the right-side axis title (Sales Count) to match the orange line
axis.title.y.right = element_text(color = "#F7C4C1", size = 12),
# Color the left-side axis title (Redemption Count) to match the pink line
axis.title.y.left = element_text(color = "#97a675", size = 12),
# Center the title and increase font size
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
)
#| label: fig-linePlot
#| fig-cap: Redemption and Sales Counts Over Time
#| echo: false
# Calculate the range for both y-axes to have a symmetrical appearance
y_max <- max(max(data$Sales.Count), max(data$Redemption.Count))
# Create the plot
ggplot(data, aes(x = Timestamp)) +
# Line plot for Redemption Count
geom_line(aes(y = Redemption.Count), color = "#F7C4C1", linewidth = 1.2) +
# Line plot for Sales Count (inverted)
geom_line(aes(y = -Sales.Count), color = "#81B0B2", linewidth = 1.2) +
# Set y-axis limits symmetrically and apply the secondary axis
scale_y_continuous(limits = c(-y_max, y_max),
breaks = seq(-y_max, y_max, by = 1000),
sec.axis = sec_axis(~ -.,
name = "Sales Count",
breaks = seq(y_max, -y_max, by = -1000))) +
# Add plot labels
labs(
title = "Redemption and Sales Count Over Time",
y = "Redemption Count",  # Y-axis for Redemption Count
x = "Timestamp"          # X-axis for Timestamp
) +
# Apply minimal theme and customize axis titles
theme_minimal() +
theme(
# Color the right-side axis title (Sales Count) to match the orange line
axis.title.y.right = element_text(color = "#F7C4C1", size = 12),
# Color the left-side axis title (Redemption Count) to match the pink line
axis.title.y.left = element_text(color = "#81B0B2", size = 12),
# Center the title and increase font size
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
)
